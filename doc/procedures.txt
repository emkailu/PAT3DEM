# Procedures to process electron microscopy (EM) data

0. PRINCIPLES.
1)MANUAL inspection, after automatic run, is necessary.
2)Only exclude wrong things during initial steps.
3)Only include correct things during the final step.

1. BE ORGANIZED.
specimen_mag/subfolder/date/date_number, e.g.,
"PHN-GK_25K/Rawmovies/20151021/20151021_001.mrc"

2. PREPROCESS MOVIES.
***mag_distortion_correct
Correct anisotropic mag distortion, see Zhao et al., 2015, and Grant & Grigorieff, 2015.

***p3movie.py
1)Align frames: iteratively align each frame with the current best total sum.
2)Output unfiltered sum/movie and filtered sum.
①Unfiltered sum/movie should be used for CTF estimation.
②Filtered sum should be used for initial classifications and refinement (not only more accurate, but also faster).
③Unfiltered sum/movie should be used for the movie processing (continue from the converged filtered refinement), if the highest resolution is desired.
④Skip the first few (2 * 0.2 seconds) frames due to beam induced drift, as it may affect alignment, CTF and SNR.
⑤Uniform, rather than mixed, dose should be used, e.g., if you have 100 20-frame movies (~25e/A^2, 200keV) and 100 50-frame movies, then do a 20-frame movie processing using the 200 movies and a 50-frame movie processing using the 100 movies, finally merge them, which may not give better results than the 20-frame movie processing using the 200 movies.
⑥It is possible, at this step, to scale the entire micrographs, but, it may be better to scale the boxed particles at later steps. Do note that too small pixel size not only wastes computation, but may also negatively affect the resolution.
3)For faster processing (at the speed of data transfer), submit a job running ***p3movierun.py to cluster, and then run ***p3downloadrun.sh locally (in a new tab).

3. CTF.
***p3ctf.py
1)Based on unfiltered movie.
2)Choose good parameters.
①Increase the minimum resolution to "just before" the first zero of the CTF.
②Increase the maximum resolution to approximately where ctffind reports detecting rings.
③Choose a right defoci range.
3)For faster processing, run ***p3ctfrun.py.

***p3ctfscreen.py
Screen based on the output of p3ctf.py.

4. LOCATE PARTICLES.
***e2boxer
1)Low-pass filter to see particles clearly (also invert contrast).
2)Erase: ①bad area; ②big no-particle area.
3)Swarm tool:
①Box size: ideally D+2R, R=λΔF/d, see Rosenthal & Henderson, 2003. D is diameter of particles, λ=0.025Å for 200 keV (0.02 for 300), ΔF is defocus, d is target resolution. If the box size is too big, consider downscale the particles.
②Change threshold so that visible particles are not excluded.
③Delete bad boxes (if the whole micrograph is bad, clear boxes).
④Finish one micrograph before processing the next.
4)Exclude bad micrographs (boxes cleared to 0).

***relion_preprocess
1)Stddev for white/black dust removal. Always use -1. If it doesn't work, find and exclude the bad particles.

***p3starscale.py
Scale the OriginX/Y and DetectorPixelSize.

***p3starcoord.py
Get coordinates from star files, consider _rlnOriginX and _rlnOriginY if they are in the star files.

***p3starmerge.py
1)Merge star files containning particles, and regroup.
2)Regroup, if only one star file was given.

5. SCREEN PARTICLES.
***p3micscreen.py
Screen micrographs based on outputs of p3movie.py and p3ctf.py, modulated by numptcl and defocus.

***relion_refine
1)2D:
①Not super-accurate, so start with downscaled particles (Nyquist > 10Å).
②Ignore CTFs until first peak when using unscaled particles.
③Clean background beyond particles is good.
④Density variation within particles is good.
2)3D: Try different parameters to make it work.

***p3starscreen.py
Write two new star files after screening by an item in the star file.

6. GOLD-STANDARD REFINEMENT.
***SIMPLE
Generate an initial model.

***relion_refine
1)It's not always necessary to low-pass filter the initial model.
2)Largest memory is used when each iteration is being initialized.
3)Movie processing: ①Partial masking (e.g. 50S) is not necessary; ②Use running average to get enough SNR.
4)Partial masking (e.g. 50S) after several iterations may not be as optimal as from the first iteration.

7. INTERPRET MAPS.
***p3xml.py
Convert xml to txt and optionally display it.

***p3recrand.py
Reconstruct from randomly selected particles from _data.star.

***p3cuboidgen.py
Generate a cuboid on the grid of input image.

***p3cuboidvalue.py
Output the values of voxels within a coordinate range, 'x1 x2 y1 y2 z1 z2'.

***p3pdbdev.py
Output pdb1, whose B-factor is replaced by CA deviation between pdb1 and pdb2.

RUN INDIVIDUAL PROGRAMS WITHOUT ANY OPTIONS TO GET REFERENCES OF DEPENDENCIES.
